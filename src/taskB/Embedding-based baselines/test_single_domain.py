#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ–Ω–µ
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = '../../../'
sys.path.append(project_root)

from src.taskB.method_v1_1.term_classification_with_embeddings import EmbeddingTermClassifier, load_taskb_data

def test_single_domain(domain_name="MatOnto"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain_name}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train_data, test_data, domains = load_taskb_data()
    
    if domain_name not in train_data or domain_name not in test_data:
        print(f"‚ùå –î–æ–º–µ–Ω {domain_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã {domain_name} –¥–∞–Ω–Ω—ã—Ö:")
    print("Train –ø—Ä–∏–º–µ—Ä:")
    print(json.dumps(train_data[domain_name][0], indent=2, ensure_ascii=False))
    print("\nTest –ø—Ä–∏–º–µ—Ä:")
    print(json.dumps(test_data[domain_name][0], indent=2, ensure_ascii=False))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞)
    classifier = EmbeddingTermClassifier(
        model_name="Qwen/Qwen3-Embedding-4B",
        max_length=8192
    )
    
    # –û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    classifier.classifiers = {}  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train_texts, test_texts, y, test_terms, df_train = classifier.prepare_data(
        train_data[domain_name][:10],  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∞
        test_data[domain_name][:5]     # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
    )
    
    print(f"\nüî¢ –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"Train: {len(train_texts)} —Ç–µ–∫—Å—Ç–æ–≤")
    print(f"Test: {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤")
    print(f"–ö–ª–∞—Å—Å—ã: {y.shape[1]} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞)
    print("\nüßÆ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    X_train = classifier.get_embeddings(train_texts, batch_size=4)
    X_test = classifier.get_embeddings(test_texts, batch_size=4)
    
    print(f"Train embeddings: {X_train.shape}")
    print(f"Test embeddings: {X_test.shape}")
    
    # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    print("\nü§ñ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    from sklearn.linear_model import LogisticRegression
    from sklearn.multiclass import OneVsRestClassifier
    
    lr_model = OneVsRestClassifier(LogisticRegression(max_iter=100))
    lr_model.fit(X_train.numpy(), y)
    classifier.classifiers['logistic_regression'] = lr_model
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    print("\nüîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    predictions = classifier.predict(X_test, test_terms, test_data[domain_name][:5])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {domain_name}:")
    for name, pred_data in predictions.items():
        print(f"\n{name.upper()}:")
        for i, pred in enumerate(pred_data):
            print(f"  {pred}")
            if i >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                print("  ...")
                break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞:")
    sample_pred = predictions['logistic_regression'][0]
    required_keys = ['id', 'types']
    
    for key in required_keys:
        if key in sample_pred:
            print(f"  ‚úÖ {key}: {type(sample_pred[key])}")
        else:
            print(f"  ‚ùå {key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ id –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if 'id' in sample_pred:
        original_id = test_data[domain_name][0]['id']
        predicted_id = sample_pred['id']
        if original_id == predicted_id:
            print(f"  ‚úÖ ID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {original_id}")
        else:
            print(f"  ‚ùå ID –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {original_id} != {predicted_id}")
    
    print(f"\nüéâ –¢–µ—Å—Ç {domain_name} –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_single_domain("MatOnto") 